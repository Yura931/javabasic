package ch06;
public class 객체지향언어Ex1 {

    int 멤버변수;

    public String 왜나왔나() {
        StringBuilder sb = new StringBuilder();
        sb.append("80년 초 소프트웨어의 위기 - 빠른 변화를 못쫓아감\n");
        sb.append("해결책으로 객체지향 언어를 도입(절차적 -> 객체지향)\n");
        sb.append("코드의 재사용성이 높고 유지보수가 용이, 중복 코드 제거\n");
        sb.append("객체지향 언어 = 프로그래밍 언어 + 객체지향개념(규칙)\n");
        sb.append(String.valueOf(멤버변수));
        return sb.toString();
    }

    public void 멤버변수변경(int 변경값) {
        this.멤버변수 = 변경값;
    }
    public static void main(String[] args) {
        /*
            객체지향언어 ! !
            ** 제일 중요 **

           80년 초 소프트웨어의 위기 - 빠른 변화를 못쫓아감
           해결책으로 객체지향 언어를 도입(절차적 -> 객체지향)
           코드의 재사용성이 높고 유지보수가 용이, 중복 코드 제거
           객체지향 언어 = 프로그래밍 언어 + 객체지향개념(규칙)

           oop(object-oriented programing)
           네가지 핵심개념 / 외워!
           1. 캡슐화
           2. 상속
           3. 추상화
           4. 다형성

           클래스의 정의 : 클래스란 객체를 정의해 놓은 것
           클래스의 용도 : 클래스는 객체를 생성하는데 사용
           객체의 정의 : 실제로 존재하는 것. 사물 또는 개념
           객체의 용도 : 객체가 가지고 있는 기능과 속성에 따라 다름

           하드웨어 -> 소프트웨어
           ex) TV 라는 HW를 SW로 만들어서 컴퓨터에서 사용 가능하게 만듦
           하드웨어를 어떻게 소프트웨어 화 할까 .. -> 프로그램 = 코드

           객체 = 속성(변수) + 기능(메서드)
                : 모든 인스턴스를 대표하는 일반적 용어
            인스턴스 : 특정 클래스로부터 생성된 객체(예:Tv인스턴스)

            클래스 -> 인스턴스화 -> 인스턴스(객체)

            일반적으로는 하나의 소스파일에 하나의 클래스

            public class가 있는 경우 소스파일의 이름은 반드시 public class의 이름과 일치해야 함
            public class가 하나도 없는 경우 소스파일의 이름은 어느것이든 사용할 수 있음

        */
    }
}

