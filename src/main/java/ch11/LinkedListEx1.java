package ch11;

import java.util.LinkedList;

public class LinkedListEx1 {
    public static void main(String[] args) {
        /*
               배열의 장단점
               장점 : 배열은 구조가 간단하고 데이터를 읽는 데 걸리는 시간(접근시간, access time)이 짧다. 배열은 연속적, 배열주소 + 타입크기 * index 데이터 주소 찾기 용이, 읽기 빠름
               단점 : 크기를 변경할 수 없다.
                        - 크기를 변경해야 하는 경우 새로운 배열을 생성 후 데이터를 복사해야 함.
                        - 크기 변경을 피하기 위해 충분히 큰 배열을 생성하면, 메모리가 낭비됨.
                    : 비순차적인(중간) 데이터의 추가, 삭제에 시간이 많이 걸림.
                        - 데이터를 추가하거나 삭제하기 위해, 다른 데이터를 옮겨야 함.
                        - 그러나 순차적인 데이터 추가(끝에 추가)와 삭제(끝부터 삭제)는 빠름.

            배열 크기 변경 방법 - 이 과정이 시간이 너무많이 걸림
                1. 더 큰 배열생성
                2. 기존 배열 복사
                3. 참조 변경


            LinkedList - 배열의 단점을 보완
                : 배열과 달리 링크드 리스트는 불연속적으로 존재하는 데이터를 연결(link)
                : 데이터가 바로 옆에 있는것이 아님, 옆에 있을 수도 있고, 멀리 떨어져 있을수도 있고
                : 다음 노드가 어디에 있는지 알 수 있음
                : 데이터의 삭제 - 단 한 번의 참조변경만으로 가능, 연결 값만 변경하면 됨, 제외 된 노드는 나중에 GC가 지워 줄 것
                : 데이터의 추가 - 한 번의 Node객체생성과 두 번의 참조변경만으로 가능

                단점 - 연결리스트, 데이터 접근성이 나쁨(데이터 많을 수록 접근성 더 떨어짐)
                    , 자기기준 다음 노드 위치만 알고 이전 노드나 중간의 노드가 어느 위치에 있는지 알지 못함, 1에서 3번을 찾아가려면 무조건 1 -> 2 -> 3 이 순서로 찾아가야 함

                앞뒤 이동 접근성 향상을 위해 개선 된 리스트 -> 더블리 링크드 리스트(doubly linked list)
                맨 처음과 맨 뒤를 연결시켜서 앞에서 끝번호까지 한번에, 끝번호에서 맨 앞까지 한번에 갈 수 있도록 개선된 리스트 -> 더블리 써큘러 링크드 리스트(doubly circular linked list)


            자료구조 (data Structure)
                배열기반(연속)
                연결기반(불연속)
        */

        LinkedList linkedList = new LinkedList();
    }
}
